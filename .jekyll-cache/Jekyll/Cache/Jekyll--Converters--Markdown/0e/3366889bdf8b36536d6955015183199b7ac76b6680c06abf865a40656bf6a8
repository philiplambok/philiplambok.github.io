I"tk<p>Dalam menulis kode Rails kita biasanya memiliki satu mantra yakni</p>

<blockquote>
  <p>Skinny Controller, Fat Model</p>
</blockquote>

<p>Perbincangan di kalangan <em>Rails Developer</em> mungkin yang sering kita temui.</p>

<p>Q: Apa kode ini bisa saya taro di <em>views</em>?<br />
A: Jangan.<br />
Q: Hmnn, lalu apakah boleh saya <em>taro</em> di <em>controller</em>?<br />
A: Hmn, jangan juga <em>deh</em><br />
Q: Hmnn, berarti model <em>dong ya</em>?<br />
A: Ok Sipp.</p>

<p>Hingga akhirnya kelas model kita benar-benar menjadi besar.</p>

<p>Beberapa contohnya bisa kita lihat dari salah satu projek <em>open source</em> yang besar seperti Discourse. Projek ini memiliki 1551 baris di model <a href="https://github.com/discourse/discourse/blob/master/app/models/topic.rb">topic.rb</a> begitu juga dengan model <a href="https://github.com/discourse/discourse/blob/master/app/models/user.rb">user.rb</a> yang memiliki 1490 baris (<em>diakses 22 April 2019</em>).</p>

<p>Saya rasa untuk satu kelas yang memilki banyak kode/baris seperti ini sangat sulit dipeliharanya. Bisa dilihat dari banyak kode ini, kelas ini sudah memiliki banyak tanggung jawab yang diberikan kepadanya. Untuk mengatasi masalah ini komunitas Rails sudah mengenalkan pola <em>Service Object</em>.</p>

<p><em>Service Object</em> mungkin saya bisa bilang adalah sebuah layer yang berdiri diantara <em>controller</em> dan model. Layer ini bertujuan untuk mengurangi tanggung jawab model sehingga hasil akhir yang diharapkan kode di dalam model bisa lebih sedikit.</p>

<p>Pola ini berhasil di pasar komunitas Rails, banyak yang memamfaatkannya karena ternyata bisa mengurangi kode model yang cukup signifikan. Namun, ternyata realitas tidak seindah itu dirasakan.</p>

<p>Mantra mulai beralih menjadi :</p>

<blockquote>
  <p>Skinny Controller, Fat Model, Fat Service</p>
</blockquote>

<p>Dari awal Rails memang tidak memiliki peraturan yang ketat pada layer-layer ini, begitu juga dengan <em>service layer</em>. Tidak jelas kode apa yang harus ditulis di <em>controller</em>, di model dan juga di <em>service</em>. Seperti yang dikatakan sebelumnya, <em>Service layer</em> hanyalah sebagai tempat pembuangan diantara <em>controller</em> dan model agar kedua objek yang lain itu lebih bersih saja.</p>

<p>Hingga akhirnya ada beberapa skenario seperti kode-kode yang di dalam <em>callback</em> <code class="language-plaintext highlighter-rouge">before_action</code>, <code class="language-plaintext highlighter-rouge">after_action</code> dan teman-temannya muncul. Pada kode awal, kode-kode yang didalam blok ini di ekstrak keluar ke <em>service object</em> agar model terhindar dari <em>aplikasi logic</em>. Namun kode-kode ini sangat terikat dengan model, sedangkan <em>service objek</em> tidak. Service objek hanyalah berdiri diantara 1 controller dan 1 model.</p>

<p>Hingga akhirnya kita kembali menulis <code class="language-plaintext highlighter-rouge">before_action</code> dan <code class="language-plaintext highlighter-rouge">after_action</code> di dalam model karena memang tidak relevan di <em>service object</em>. Maka, model kita kembali memiliki <em>aplikasi logic</em> yang jika aplikasi terus berkembang, mau tidak mau model kita akan terus bertambah gemuk.</p>

<p>Pada tulisan ini saya ingin mengenalkan <em>Mutator Layer</em>. Sebuah layer baru yang mencoba mengatasi masalah yang baru saja dibahas. Pada pengenalan ini saya akan mengajak pembaca untuk mengerjakan studi kasus terkait hal diatas agar kita bisa lebih paham, lalu mencoba memberikan solusinya.</p>

<p><strong>Studi kasus</strong></p>

<p>PT MRT Jakarta (sebuah perusahaan perkeretaan) mengontrak kita untuk menambahkan 3 fitur di dalam sistemnya.</p>

<ol>
  <li>
    <p><strong>Penambahan antrian kereta</strong></p>

    <p>Di halaman tambahan antrian, admin memilih kereta yang akan ditambahkan ke antrian, setelah ditambahkan kereta otomatis masuk ke antrian (paling terakhir) lalu sistem mengirim log untuk penambahan keretanya (Lognya: Kereta TIPE-X masuk antrian urutan ke 3).</p>
  </li>
  <li>
    <p><strong>Penghapusan antrian kereta</strong></p>

    <p>Di halaman list antrian, admin dapat menghapus kereta tertentu dan ketika kereta dihapus di antrian, maka kereta-kereta yang antriannya dibawah kereta yang bersangkutan akan naik ke atas. Setelah itu sistem memberikan log juga ke sistem. (Lognya: Kereta dengan TIPE-X terhapus dari antrian ke 3).</p>
  </li>
  <li>
    <p><strong>Penghapusan kereta</strong></p>

    <p>Di halaman daftar kereta, admin dapat memilih dan menghapus kereta yang dipilih. Setelah dipilih sistem menghapus kereta dan juga antrian dari kereta yang bersangkutan. Lalu sistem juga menulis log ke sistem. (Lognya: Kereta TIPE-X terhapus dari daftar kereta).</p>
  </li>
</ol>

<p>Analogi studi kasus diatas kira-kira bisa kita gambarkan seperti ini:</p>

<p><img src="/assets/anologi-soal.png" alt="Analogi Soal" /></p>

<p>Awalnya, mari kita rancang sistem basis datanya terdahulu.</p>

<p>kira-kira akan seperti ini:</p>

<p><img src="/assets/mutator-example-erd.png" alt="Struktur data" /></p>

<p>Lalu kita menulis kode untuk fitur pertama, yaitu kode untuk penambahan antrian ke dalam sistem.</p>

<p>Kode untuk controllernya</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># / app/controllers/trains/queue_controller.rb</span>
<span class="k">class</span> <span class="nc">Trains::QueueController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="no">TrainQueueController</span><span class="o">::</span><span class="no">Create</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">train</span><span class="p">).</span><span class="nf">perform</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># / app/services/train_queue_service/create.rb</span>
<span class="k">module</span> <span class="nn">TrainQueueService</span>
  <span class="k">class</span> <span class="nc">Create</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">train</span><span class="p">)</span>
      <span class="vi">@train</span> <span class="o">=</span> <span class="n">train</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">perform</span>
      <span class="c1"># get last number in trains queue.</span>
      <span class="n">last_number</span> <span class="o">=</span> <span class="no">Train</span><span class="o">::</span><span class="no">Queue</span><span class="p">.</span><span class="nf">last_number</span>
      <span class="c1"># set current train number with last number plus one.</span>
      <span class="n">current_number</span> <span class="o">=</span> <span class="n">last_number</span> <span class="o">+</span> <span class="mi">1</span>
      <span class="c1"># save train in train queue</span>
      <span class="no">Train</span><span class="p">.</span><span class="nf">queue</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">number: </span><span class="n">current_number</span><span class="p">,</span> <span class="ss">train: </span><span class="vi">@train</span><span class="p">)</span>
      <span class="c1"># last, we create log for this feature.</span>
      <span class="n">log_message</span> <span class="o">=</span> <span class="s2">"Kereta </span><span class="si">#{</span><span class="vi">@train</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> masuk antrian urutan ke-</span><span class="si">#{</span><span class="vi">@train</span><span class="p">.</span><span class="nf">number</span><span class="si">}</span><span class="s2">"</span>
      <span class="no">Log</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">description: </span><span class="n">log_message</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Pada kode diatas secara singkat kita hanya memanggil objek <em>service</em>  di <em>controller</em> dan berikan dia bertanggung jawab atas penambahan fitur antrian kereta.</p>

<p>Maka fitur pertama kita sudah selesai, sekarang kita lanjut ke fitur selanjutnya, fitur kedua yaitu fitur penghapusan kereta.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#/ app/controllers/trains/queue_controller.rb</span>
<span class="k">class</span> <span class="nc">Trains::QueueController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="c1"># ...</span>
  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="no">TrainQueueService</span><span class="o">::</span><span class="no">Destroy</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">train</span><span class="p">).</span><span class="nf">perform</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># / app/services/train_queue_service/destroy.rb</span>
<span class="k">module</span> <span class="nn">TrainQueueService</span>
  <span class="k">class</span> <span class="nc">Destroy</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">train</span><span class="p">)</span>
      <span class="vi">@train</span> <span class="o">=</span> <span class="n">train</span>
    <span class="k">end</span>

    <span class="c1"># Logic:</span>
    <span class="c1"># 1. Kita menaikan antrian dari semua kereta</span>
    <span class="c1"># yang antriannya dibawah kereta yang ingin dihapus</span>
    <span class="c1"># 2. Lalu, baru kita menghapus kereta yang bersangkutan</span>
    <span class="c1"># 3. Terakhir, kita membuatkan lognya.</span>
    <span class="k">def</span> <span class="nf">perform</span>
      <span class="n">queue</span> <span class="o">=</span> <span class="no">Train</span><span class="o">::</span><span class="no">Queue</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">train: </span><span class="vi">@train</span><span class="p">)</span>
      <span class="n">queues</span> <span class="o">=</span> <span class="no">Train</span><span class="o">::</span><span class="no">Queue</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="s1">'number &lt; ?'</span><span class="p">,</span> <span class="n">queue</span><span class="p">.</span><span class="nf">number</span><span class="p">)</span>
      <span class="n">queues</span><span class="p">.</span><span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:decrease_number!</span><span class="p">)</span>
      <span class="n">_queue</span> <span class="o">=</span> <span class="n">queue</span>
      <span class="n">queue</span><span class="p">.</span><span class="nf">destroy</span>
      <span class="n">log_message</span> <span class="o">=</span> <span class="s2">"Kereta dengan tipe </span><span class="si">#{</span><span class="vi">@train</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> terhapus dari antrian ke </span><span class="si">#{</span><span class="n">_queue</span><span class="p">.</span><span class="nf">number</span><span class="si">}</span><span class="s2">"</span>
      <span class="no">Log</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">description: </span><span class="n">log_message</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Kode diatas sudah lumayan panjang. Intinya seperti yang di komentar yaitu menghapus kereta yang dipilih dari antrian lalu mengurangi number dari semua kereta yang antriannya sesudah dari kereta yang dihapus. Lalu yang terakhir yaitu membuatkan lognya.</p>

<p>Fitur pertama dan kedua telah selesai, sekarang kita lanjut ke fitur yang ketiga (terakhir). Kita membuat sebuah fitur penghapusan kereta. Dimana ketika kereta dihapus, sistem akan menyimpan log <em>“Kereta TIPE-X terhapus dari daftar kereta”</em>. Kereta yang dihapus juga, akan menghapus antrian yang mungkin sebelumnya sudah terdafatar.</p>

<p>Lalu kita mungkin berfikir kalo di kode ini kita bisa memanggil service penghapusan antrian yang sebelumnya kita sudah buat:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#/ app/controllers/trains/queue_controller.rb</span>
<span class="k">class</span> <span class="nc">TrainsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="c1"># ...</span>
  <span class="k">def</span> <span class="nf">destroy</span>
    <span class="no">TrainService</span><span class="o">::</span><span class="no">Destroy</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">train</span><span class="p">).</span><span class="nf">perform</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1">#/ app/services/trains_service/destroy.rb</span>
<span class="k">class</span> <span class="nc">TrainsService</span>
  <span class="k">class</span> <span class="nc">Destroy</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">train</span><span class="p">)</span>
      <span class="vi">@train</span> <span class="o">=</span> <span class="n">train</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">perform</span>
      <span class="c1"># Sebelum menghapus keretanya, kita menghapus antriannya terlebih dahulu</span>
      <span class="no">TrainQueueService</span><span class="o">::</span><span class="no">Destroy</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="vi">@train</span><span class="p">)</span>
      <span class="n">_train</span> <span class="o">=</span> <span class="vi">@train</span>
      <span class="vi">@train</span><span class="p">.</span><span class="nf">destroy</span>
      <span class="no">Log</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">description: </span><span class="s2">"Kereta </span><span class="si">#{</span><span class="n">_train</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> terhapus dari daftar kereta"</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Kode diatas singkatnya menghapus antrian kereta, lalu baru menghapusnya. Namun sayangnya kode diatas tidak mengikuti permintaan user. Karena di service <code class="language-plaintext highlighter-rouge">TrainsQueueService</code> membuatkan log untuk penghapusan antrian diakhir prosesnya, sedangkan user tidak menginginkan hal tersebut.</p>

<p>Mau tidak mau, kita harus rombak kode service yang sebelumnya sudah dibuat, dan memindahkan penghapusan antrian pindah ke model.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># / app/models/train/queue.rb</span>
<span class="k">class</span> <span class="nc">Train::Queue</span> <span class="o">&lt;</span> <span class="no">ApplicationModel</span>
  <span class="n">before_destroy</span> <span class="k">do</span>
    <span class="n">trains</span> <span class="o">=</span> <span class="n">where</span><span class="p">(</span><span class="s1">'number &lt; ?'</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>
    <span class="n">trains</span><span class="p">.</span><span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:decrease_number!</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">decrease_number!</span><span class="p">;</span> <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># / app/services/train_queue_service/destroy.rb</span>
<span class="k">module</span> <span class="nn">TrainQueueService</span>
  <span class="k">class</span> <span class="nc">Destroy</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">train</span><span class="p">)</span>
      <span class="vi">@train</span> <span class="o">=</span> <span class="n">train</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">perform</span>
      <span class="n">queue</span> <span class="o">=</span> <span class="no">Train</span><span class="o">::</span><span class="no">Queue</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">train: </span><span class="vi">@train</span><span class="p">)</span>
      <span class="n">_queue</span> <span class="o">=</span> <span class="n">queue</span>
      <span class="n">queue</span><span class="p">.</span><span class="nf">destroy</span>
      <span class="n">log_message</span> <span class="o">=</span> <span class="s2">"Kereta dengan tipe </span><span class="si">#{</span><span class="vi">@train</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> terhapus dari antrian ke </span><span class="si">#{</span><span class="n">_queue</span><span class="p">.</span><span class="nf">number</span><span class="si">}</span><span class="s2">"</span>
      <span class="no">Log</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">description: </span><span class="n">log_message</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Kode diatas kita memindahkan <em>logic</em> dari <em>service</em> ke model, karena kode-kode ini akan selalu dipanggil ketika kita menginginkan penghapusan model. Maka dengan kode ini fitur menjadi sesuai yang diinginkan klien kita.</p>

<p>Namun kita jadi mengenalkan <em>application logic</em> pada model kita. Dimana ketika dikemudian hari aplikasi terus berkembang, maka model kita akan menjadi makin gemuk.</p>

<p>Sekarang waktunya saya mengenalkan anda pola mutator. Dimana kelas ini sebagai kelas yang menggantikan <em>callback</em> yang ada di dalam model seperti <code class="language-plaintext highlighter-rouge">before_action</code>, <code class="language-plaintext highlighter-rouge">after_action</code>, <code class="language-plaintext highlighter-rouge">before_update</code>, <code class="language-plaintext highlighter-rouge">before_destroy</code> dan teman-temannya.</p>

<p>Mari kita implementasikan dengan kodenya</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#/ app/models/train/queue.rb</span>
<span class="k">class</span> <span class="nc">Train::Queue</span> <span class="o">&lt;</span> <span class="no">ApplicationModel</span>
  <span class="k">def</span> <span class="nf">decrease_number</span><span class="p">;</span> <span class="k">end</span>
<span class="k">end</span>

<span class="c1">#/ app/mutators/queue_mutator.rb</span>
<span class="k">class</span> <span class="nc">QueueMutator</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">destroy</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span>
    <span class="n">queues</span> <span class="o">=</span> <span class="no">Train</span><span class="o">::</span><span class="no">Queue</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="s1">'number &lt; ?'</span><span class="p">,</span> <span class="n">queue</span><span class="p">.</span><span class="nf">number</span><span class="p">)</span>
    <span class="n">queues</span><span class="p">.</span><span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:decrease_number!</span><span class="p">)</span>
    <span class="n">queue</span><span class="p">.</span><span class="nf">destroy</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1">#/ app/services/train_queue_service/destroy.rb</span>
<span class="k">module</span> <span class="nn">TrainQueueService</span>
  <span class="k">class</span> <span class="nc">Destroy</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">train</span><span class="p">)</span>
      <span class="vi">@train</span> <span class="o">=</span> <span class="n">train</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">perform</span>
      <span class="n">queue</span> <span class="o">=</span> <span class="no">Train</span><span class="o">::</span><span class="no">Queue</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">train: </span><span class="vi">@train</span><span class="p">)</span>
      <span class="no">QueueMutator</span><span class="p">.</span><span class="nf">destroy</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span>
      <span class="n">log_message</span> <span class="o">=</span> <span class="s2">"Kereta dengan tipe </span><span class="si">#{</span><span class="vi">@train</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> terhapus dari antrian ke </span><span class="si">#{</span><span class="n">_queue</span><span class="p">.</span><span class="nf">number</span><span class="si">}</span><span class="s2">"</span>
      <span class="no">Log</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">description: </span><span class="n">log_message</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1">#/ app/services/trains_service/destroy.rb</span>
<span class="k">class</span> <span class="nc">TrainsService</span>
  <span class="k">class</span> <span class="nc">Destroy</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">train</span><span class="p">)</span>
      <span class="vi">@train</span> <span class="o">=</span> <span class="n">train</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">perform</span>
      <span class="c1"># Sebelum menghapus keretanya, kita menghapus antriannya terlebih dahulu</span>
      <span class="n">queue</span> <span class="o">=</span> <span class="no">Train</span><span class="o">::</span><span class="no">Queue</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">train: </span><span class="vi">@train</span><span class="p">)</span>
      <span class="no">QueueMutator</span><span class="p">.</span><span class="nf">destroy</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span>
      <span class="n">_train</span> <span class="o">=</span> <span class="vi">@train</span>
      <span class="vi">@train</span><span class="p">.</span><span class="nf">destroy</span>
      <span class="no">Log</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">description: </span><span class="s2">"Kereta </span><span class="si">#{</span><span class="n">_train</span><span class="p">.</span><span class="nf">name</span><span class="si">}</span><span class="s2"> terhapus dari daftar kereta"</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Kita membuat mutator, dimana kodenya diambil dari <code class="language-plaintext highlighter-rouge">before_destroy</code> yang sebelumnya ada di model <code class="language-plaintext highlighter-rouge">Train::Queue</code>. Lalu mutator itu kita penggil di <em>service</em> <code class="language-plaintext highlighter-rouge">TrainQueueService</code> dan <code class="language-plaintext highlighter-rouge">TrainsService</code> menggantikan <code class="language-plaintext highlighter-rouge">queue.destroy</code> menjadi <code class="language-plaintext highlighter-rouge">QueueMutator.destroy(queue)</code>.</p>

<p>Dengan mengimplementasikan mutator, model kita menjadi bersih terhindar dari <em>aplication logic</em>. Memang model menurut saya harusnya hanya mempresentasikan <em>record</em> dari satu tabel database saja. Penjelasan lanjut dengan domain model mungkin akan dibahas di tulisan yang lain.</p>

<blockquote>
  <p>Always implement things when you actually need them, never when you just foresee that you need them. (YAGNI – You aren’t gonna need it yet).</p>
</blockquote>

<p>Sebuah prinsip yang menganjurkan bahwa programmer seharusnya tidak menambah fungsional jika memang tidak diperlukan. Artinya mutator digunakan hanyalah ketika memang perintah lebih dari satu yang terlihat adanya <code class="language-plaintext highlighter-rouge">before_action</code> pada model.</p>

<p>Jika <code class="language-plaintext highlighter-rouge">before_action</code> tidak ada di model, maka jangan gunakan mutator karena anda tidak memerlukannya, cukup gunakan <em>magic_rails</em>-nya saja seperti <code class="language-plaintext highlighter-rouge">user.create</code>, <code class="language-plaintext highlighter-rouge">user.destroy</code>, dll dan bukan <code class="language-plaintext highlighter-rouge">UserMutator.create(user)</code>,dll.</p>

<table>
  <thead>
    <tr>
      <th>Action</th>
      <th>Trivial</th>
      <th>Complex</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Create</td>
      <td>User.create</td>
      <td>UserMutator.create(user)</td>
    </tr>
    <tr>
      <td>Destroy</td>
      <td>User.destroy</td>
      <td>UserMutator.destroy(user)</td>
    </tr>
    <tr>
      <td>Save</td>
      <td>User.save</td>
      <td>UserMutator.save(user)</td>
    </tr>
    <tr>
      <td>Update</td>
      <td>User.update</td>
      <td>UserMutator.update(user)</td>
    </tr>
  </tbody>
</table>

<p>Atau secara alur bisa digambarkan seperti gambar dibawah.</p>

<p><img src="/assets/flow-mutator.png" alt="Flow Mutator" /></p>

<p><strong>Kesimpulan</strong></p>

<p>Mutator adalah sebuah solusi dari bagian gelap (tidak terlihat) dari service object yang semakin besar. Semakin besar sebuah kelas, maka semakin banyak tanggung jawab dari kelas tersebut. Ada sebuah prinsip juga yang mengatakan setiap kelas harusnya hanya punya satu tanggung jawab saja (<em>Single Responsibility Principal/SPR</em>).</p>

<p>Ada prinsip atau rules lain yang menyebutkan bahwa setiap kelas maksimal harusnya hanya boleh memiliki 100 baris saja, jika anda mengikuti peraturan default pada Rubocop. Semakin kecil kelas juga kelas lebih mudah digunakan kembali (<em>reuseable</em>) sehingga kode juga lebih mudah untuk dipelihara.</p>

<p>Semoga tulisan ini dapat bermamfaat bagi pembaca sekalian.</p>
:ET