I"›9<p>Akhirnya setelah sekian lama ada waktu untuk balik nulis lagi, hehehe.</p>

<p>Sebenernya belakangan ini lagi banyak waktu lenggang dibanding sebelum-sebelumnya karna mungkin udah sebulan lebih full-time work from home.</p>

<p>Tapi entah kenapa waktu terbakar untuk hal-hal yang lain, hmnn.</p>

<p>Akhirnya di weekend ini coba belajar hal yang baru, yaitu kafka. Dan seperti biasa setiap belajar yang baru enaknya sambil bikin projek kecil-kecilan.</p>

<p>Untuk yang belum kenal, simplenya kafka itu semacam sidekiq (message bus) tapi bisa dipake di multi server atau <em>distributed</em>. Seperti yang kita tahu sidekiq hanya support di single server.</p>

<p>Pada tulisan ini gw coba sharing projek kecil-kecilan yang baru gw buat untuk mengimplementasi kafka di Ruby. Tapi kiita tidak menggunakan port <a href="https://github.com/zendesk/ruby-kafka">ruby-kafka</a>, tapi akan menggunakan <a href="https://github.com/phobos/phobos">phobos</a>.</p>

<p>Yups, karna api dari Phobos, sangat-sangat kawaii &lt;3</p>

<p>Projek kita akan sangat simple, di projek ini kita hanya cukup meyimpan payload yang dikirim lewat public api yang kita siapkan.</p>

<p>Dari public api itu, kita menambah antrian di kafka kita (Producing), lalu kita membuat sebuah listener yang akan mengkonsumsi antrian yang di kafka, dari listener itu kita akan menyimpan data payloadnya ke database kita.</p>

<p>Mari kita mulai:</p>

<h3 id="install-kafka-di-os-x">Install Kafka di OS X</h3>

<p>Sebelumnya pastikan java sudah terinstal dulu.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$&gt; brew install kafka
$&gt; zkserver start
$&gt; kafka-server-start /usr/local/etc/kafka/server.properties
</code></pre></div></div>

<p>Jika anda pengguna linux atau windows bisa google sendiri yaa, hehe.</p>

<h3 id="membuat-projek-rails-baru">Membuat projek rails baru</h3>

<p>Silahkan buat aplikasi rails baru menggunakan CLI.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$&gt; rails new play-ruby-kafka --api -T --database=mysql
</code></pre></div></div>

<h3 id="install-phobos">Install Phobos</h3>

<p>Silahkan tambahkan gem ini di Gemfile</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="s1">'phobos'</span>
</code></pre></div></div>

<p>Lalu jalankan <code class="language-plaintext highlighter-rouge">$&gt; bundle install</code>.</p>

<p>Setelah phobos terinstall, maka jalankan perintah ini:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$&gt; bundle exec phobos init
</code></pre></div></div>

<p>Maka anda akan digenerate 2 file:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">config/phobos.yml</code> seperti namanya, yaitu tempat mapping topic dan handler dan juga configurasi-configurasi.</li>
  <li><code class="language-plaintext highlighter-rouge">phobos_boot.rb</code> tempat untuk register listenernya.</li>
</ul>

<h3 id="membuat-public-api">Membuat Public API</h3>

<p>Kita akan membuat 3 api: membuat antrian, membuat message dan list of messages data.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>

<span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">routes</span><span class="p">.</span><span class="nf">draw</span> <span class="k">do</span>
  <span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
    <span class="n">resources</span> <span class="ss">:queues</span><span class="p">,</span> <span class="ss">only: </span><span class="sx">%i[create]</span>
    <span class="n">resources</span> <span class="ss">:messages</span><span class="p">,</span> <span class="ss">only: </span><span class="sx">%i[index create]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>

<span class="k">module</span> <span class="nn">Api</span>
  <span class="k">class</span> <span class="nc">QueuesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
    <span class="k">def</span> <span class="nf">create</span>
      <span class="n">payload</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="ss">:payload</span><span class="p">]</span>
      <span class="no">MessageProcedur</span><span class="p">.</span><span class="nf">producer</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span>
        <span class="ss">topic: </span><span class="s1">'test'</span><span class="p">,</span>
        <span class="ss">payload: </span><span class="n">payload</span><span class="p">,</span>
        <span class="ss">key: </span><span class="s1">'sample-key'</span>
      <span class="p">)</span>
      <span class="n">render</span> <span class="ss">json: </span><span class="p">{</span> <span class="ss">payload: </span><span class="n">payload</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>

<span class="k">module</span> <span class="nn">Api</span>
  <span class="k">class</span> <span class="nc">MessagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
    <span class="k">def</span> <span class="nf">index</span>
      <span class="n">render</span> <span class="ss">json: </span><span class="no">Message</span><span class="p">.</span><span class="nf">all</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">create</span>
      <span class="no">Message</span><span class="p">.</span><span class="nf">create!</span><span class="p">(</span><span class="ss">payload: </span><span class="n">params</span><span class="p">[</span><span class="ss">:payload</span><span class="p">])</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Lalu kita buat <code class="language-plaintext highlighter-rouge">config/initializers/phobos.rb</code> untuk register tempat config kita:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Phobos</span><span class="p">.</span><span class="nf">configure</span><span class="p">(</span><span class="s1">'config/phobos.yml'</span><span class="p">)</span>
</code></pre></div></div>

<p>Untuk procedur <code class="language-plaintext highlighter-rouge">/app/procedures/message_procedur.rb</code>, kodenya simple saja:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>

<span class="k">class</span> <span class="nc">MessageProcedur</span>
  <span class="kp">include</span> <span class="no">Phobos</span><span class="o">::</span><span class="no">Producer</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Dan untuk handler-nya <code class="language-plaintext highlighter-rouge">app/handlers/message_handler.rb</code>, juga simple saja:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frozen_string_literal: true</span>

<span class="nb">require</span> <span class="s1">'net/http'</span>

<span class="k">class</span> <span class="nc">MessageHandler</span>
  <span class="kp">include</span> <span class="no">Phobos</span><span class="o">::</span><span class="no">Handler</span>

  <span class="k">def</span> <span class="nf">consume</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">_metadata</span><span class="p">)</span>
    <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="p">(</span><span class="s1">'http://localhost:4000/api/messages'</span><span class="p">)</span>
    <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="p">.</span><span class="nf">post_form</span><span class="p">(</span><span class="n">uri</span><span class="p">,</span> <span class="ss">payload: </span><span class="n">payload</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Untuk menghindari issue autoloading-nya ada baiknya kita tambahkan autoload ke kedua path tersebut di <code class="language-plaintext highlighter-rouge">config/application.rb</code></p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">config</span><span class="p">.</span><span class="nf">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="p">.</span><span class="nf">root</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s1">'app'</span><span class="p">,</span> <span class="s1">'procedures'</span><span class="p">)</span>
<span class="n">config</span><span class="p">.</span><span class="nf">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="p">.</span><span class="nf">root</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s1">'app'</span><span class="p">,</span> <span class="s1">'handlers'</span><span class="p">)</span>
</code></pre></div></div>

<p>Lalu di <code class="language-plaintext highlighter-rouge">phobos_boot.rb</code>-nya kita register handlernya:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require_relative</span> <span class="s1">'app/handlers/message_handler'</span>

<span class="no">Phobos</span><span class="p">.</span><span class="nf">configure</span><span class="p">(</span><span class="s1">'config/phobos.yml'</span><span class="p">)</span>

<span class="n">listener</span> <span class="o">=</span> <span class="no">Phobos</span><span class="o">::</span><span class="no">Listener</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
  <span class="ss">handler: </span><span class="no">MessageHandler</span><span class="p">,</span>
  <span class="ss">group_id: </span><span class="s1">'test-1'</span><span class="p">,</span>
  <span class="ss">topic: </span><span class="s1">'test'</span>
<span class="p">)</span>

<span class="c1"># start method blocks</span>
<span class="no">Thread</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span> <span class="n">listener</span><span class="p">.</span><span class="nf">start</span> <span class="p">}</span>
</code></pre></div></div>

<p>Dan mapping handlernya di <code class="language-plaintext highlighter-rouge">config/phobos.yml</code>:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">listeners</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">handler</span><span class="pi">:</span> <span class="s">MessageHandler</span>
    <span class="na">topic</span><span class="pi">:</span> <span class="s">test</span>
    <span class="c1"># id of the group that the consumer should join</span>
    <span class="na">group_id</span><span class="pi">:</span> <span class="s">test-1</span>
    <span class="c1"># Number of threads created for this listener, each thread will behave as an independent consumer.</span>
    <span class="c1"># They don't share any state</span>
    <span class="na">max_concurrency</span><span class="pi">:</span> <span class="m">1</span>
    <span class="c1"># Once the consumer group has checkpointed its progress in the topic's partitions,</span>
    <span class="c1"># the consumers will always start from the checkpointed offsets, regardless of config</span>
    <span class="c1"># As such, this setting only applies when the consumer initially starts consuming from a topic</span>
</code></pre></div></div>

<p>Lalu jalankan <code class="language-plaintext highlighter-rouge">rails server</code> dan <code class="language-plaintext highlighter-rouge">bundle exec phobos start</code> (begitu juga dengan kafka-nya).</p>

<p>Lalu tembak API <code class="language-plaintext highlighter-rouge">POST /api/queues</code> dengan body</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"payload"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Sample payload"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Lalu anda akan menadapat satu data di <code class="language-plaintext highlighter-rouge">GET /api/messages</code></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="nl">"payload"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Sample payload"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"created_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2020-04-26T04:31:25.170Z"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"updated_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2020-04-26T04:31:25.170Z"</span><span class="w">
  </span><span class="p">},</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<hr />

<p>Maka, anda berhasil mengimplementasikan kafka di Ruby. Mirip seperti sidekiq, bedanya kita memiliki listener yang jalan terus menerus(lihat <code class="language-plaintext highlighter-rouge">phobos_boot.rb</code>).</p>

<p>Anda bisa lihat sample codenya di <a href="https://github.com/philiplambok/play-ruby-kafka">https://github.com/philiplambok/play-ruby-kafka</a></p>

<p>Sekiranya itu saja untuk tulisan hari ini, happy hacking~</p>
:ET